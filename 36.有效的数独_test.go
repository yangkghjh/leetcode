package leetcode

import (
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func TestIsValidSudoku(t *testing.T) {
	Convey("[36] 有效的数独", t, func() {
		testcases := [][]byte{
			[]byte{0, 0, 0},
			[]byte{8, 8, 8},
			[]byte{7, 1, 2},
			[]byte{4, 4, 4},
			[]byte{2, 5, 3},
			[]byte{3, 0, 1},
			[]byte{0, 7, 6},
			[]byte{5, 7, 7},
			[]byte{8, 6, 8},
			[]byte{8, 5, 5},
		}

		for _, testcase := range testcases {
			So(getSquareSets(testcase[0], testcase[1]), ShouldEqual, testcase[2])
		}

		args := [][][]byte{
			[][]byte{
				[]byte{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
				[]byte{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				[]byte{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				[]byte{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				[]byte{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				[]byte{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				[]byte{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				[]byte{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				[]byte{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
			[][]byte{
				[]byte{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
				[]byte{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
				[]byte{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
				[]byte{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
				[]byte{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
				[]byte{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
				[]byte{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
				[]byte{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
				[]byte{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
			},
		}
		expected := []bool{true, false}

		for i, arg := range args {
			So(isValidSudoku(arg), ShouldEqual, expected[i])
		}
	})
}
